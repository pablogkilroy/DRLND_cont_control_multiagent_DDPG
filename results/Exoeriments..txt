Experiment 1:

Collaborarive vs competitive:

score += np.mean(reward) - collaboration



Hyperparameters

BUFFER_SIZE = int(1e6)  # replay buffer size
BATCH_SIZE = 256        # minibatch size
GAMMA = 0.99            # discount factor
TAU = 1e-3              # for soft update of target parameters
LR_ACTOR = 1e-3         # learning rate of the actor 
LR_CRITIC = 1e-3        # learning rate of the critic
WEIGHT_DECAY = 0        # L2 weight decay
UPDATE_RATE = 2         # update frequency
UPDATE_TIMES = 2      # number of updates


Noise

class OUNoise:

    def __init__(self, size, seed, mu=0., theta=.15, sigma=0.2)

Model

Actor - 2 layer network with 

Critic - 2 layer network 



Experiment 2

score += np.mean(reward) - collaboration

Hyperparameters

BUFFER_SIZE = int(1e6)  # replay buffer size
BATCH_SIZE = 256        # minibatch size
GAMMA = 0.99            # discount factor
TAU = 1e-3              # for soft update of target parameters
LR_ACTOR = 1e-3         # learning rate of the actor 
LR_CRITIC = 1e-3        # learning rate of the critic
WEIGHT_DECAY = 0        # L2 weight decay
UPDATE_RATE = 2         # update frequency
UPDATE_TIMES = 2      # number of updates

Noise

class OUNoise:

    def __init__(self, size, seed, mu=0., theta=.15, sigma=0.2)

    decay = (1/2)**(i_episode/500)


Experiment 3

score += np.mean(reward) - collaboration

Hyperparameters

BUFFER_SIZE = int(1e6)  # replay buffer size
BATCH_SIZE = 256        # minibatch size
GAMMA = 0.99            # discount factor
TAU = 1e-3              # for soft update of target parameters
LR_ACTOR = 1e-3         # learning rate of the actor 
LR_CRITIC = 1e-3        # learning rate of the critic
WEIGHT_DECAY = 0        # L2 weight decay
UPDATE_RATE = 2         # update frequency
UPDATE_TIMES = 2      # number of updates

Noise

class OUNoise:

    def __init__(self, size, seed, mu=0., theta=.15, sigma=0.2)

    decay = (1/2)**(i_episode/1000)


Experiment 4

score += np.mean(reward) - collaboration

Hyperparameters

BUFFER_SIZE = int(1e6)  # replay buffer size
BATCH_SIZE = 256        # minibatch size
GAMMA = 0.99            # discount factor
TAU = 1e-3              # for soft update of target parameters
LR_ACTOR = 1e-3         # learning rate of the actor 
LR_CRITIC = 1e-3        # learning rate of the critic
WEIGHT_DECAY = 0        # L2 weight decay
UPDATE_RATE = 2         # update frequency
UPDATE_TIMES = 2      # number of updates

Noise

class OUNoise:

    def __init__(self, size, seed, mu=0., theta=.15, sigma=0.2)

    decay = (1/2)**(i_episode/2000)



